#! /usr/bin/env python

from optparse import IndentedHelpFormatter, OptionParser
from ConfigParser import ConfigParser, NoSectionError
from os.path import exists, expanduser
from subprocess import call
import sys
import re


class SafeList(list):
    def __getitem__(self, key):
        try:
            return list.__getitem__(self, key)
        except IndexError:
            return None


def usage():
    print "Usage: git-as [USER] [GIT-COMMAND] [GIT-OPTIONS....]\n"\
          "\n"\
          "git-as allows you specify what user you want\n"\
          "to preform git actions as (Designed for users on \n"\
          "a pairing station that both use git)\n"\
          "\n"\
          " Example:\n"\
          "   git as derrick commit -m \"This is a commit by derrick\"\n"\
          "   git as nathen commit -m \"This is a commit by nathen\"\n"\
          "   git as ryan commit -m \"This is a commit by ryan\"\n"\
          "\n"\
          " Or if you want to change users for all the following commands\n"\
          "   git as derrick \n"\
          "   git commit -m \"This is a commit by derrick\"\n"
    return -1


def quoteArgs(argv):
    args = []
    for arg in argv:
        # Quote args with spaces in them
        if re.search(' ', arg):
            args.append(("\"%s\"" % arg))
            continue
        args.append(arg)
    return " ".join(args)


def removeArgs(argv, remove):
    args = []
    for arg in argv:
        # Skip these arguments
        if arg in remove:
            continue
        args.append(arg)
    return args


def run(cmd):
    if call(cmd, shell=True):
        print "Command '%s' returned non-zero exit status" % cmd
        sys.exit(1)


if __name__ == '__main__':

    try:
        args = SafeList(sys.argv)
        if not args[1]:
            print " -- Please specify a user to preform as"
            sys.exit(usage())

        if not exists(expanduser("~/.git-users")):
            print "Create a ini file called ~/.git-users with the format"
            print "  [user-name] "
            print "  name = FullName"
            print "  email = email@address.com"
            raise Exception("~/.git-users does not exist")

        # Load config file
        conf = ConfigParser()
        conf.read([expanduser("~/.git-users")])

        run('git config user.name "%s"' % conf.get(args[1], 'name'))
        run('git config user.email "%s"' % conf.get(args[1], 'email'))

        options = quoteArgs(removeArgs(args, [args[0], args[1], '']))
        if options == '':
            print "-- Set git user to %s" % conf.get(args[1], 'name')
            sys.exit(0)

        sys.exit(run("git %s" % options))

    except NoSectionError, e:
        print "-- no user section '%s' in ~/.git-users" % e.section
        sys.exit(usage())
