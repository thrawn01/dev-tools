#! /usr/bin/env python

from optparse import IndentedHelpFormatter, OptionParser
from subprocess import check_output, call
import sys


class SafeList(list):
    def __getitem__(self, key):
        try:
            return list.__getitem__(self, key)
        except IndexError:
            return None


class DescFormatter(IndentedHelpFormatter):

    def format_description(self, description):
        return "track remote git branches\n"\
               "\n"\
               "Example:\n"\
               "    git track remote-branch\n"\
               "    echo \"My Change\" >> README\n"\
               "    git add README\n"\
               "    git push\n"\
               "\n"\
               "Specify an origin\n"\
               "    git track origin remote-branch\n"\
               "    git track github remote-branch\n"


def run(cmd, explain):
    if not explain:
        if call(cmd, shell=True):
            print "Command '%s' returned non-zero exit status" % cmd
            sys.exit(1)
    print "-- ", cmd


if __name__ == '__main__':

    parser = OptionParser(usage="Usage: %prog [-h] [-e] [origin] <remote>",
                formatter=DescFormatter(), description=' ')
    parser.add_option('-e', '--explain', const=True, action='store_const',
            help="print commands to be executed, instead of executing them")
    options, args = parser.parse_args()
    args = SafeList(args)
    remote = 'origin'

    if not args[0]:
        print "-- Please specify a remote branch to track"
        sys.exit(parser.print_help())
    branch = args[0]

    # If the user also specifed a remote repo
    if args[1]:
        (remote, branch) = args[0:2]

    # Ensure the local branch tracks with the remote branch
    run("git fetch %(remote)s" % locals(), options.explain)
    run("git branch --track %(branch)s %(remote)s/%(branch)s"
            % locals(), options.explain)
    run("git checkout %(branch)s" % locals(), options.explain)
