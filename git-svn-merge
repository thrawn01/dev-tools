#! /usr/bin/env python

import sys, os, re
from optparse import IndentedHelpFormatter, OptionParser
from subprocess import check_output, call
from shutil import rmtree


class SafeList(list):
    def __getitem__(self, key):
        try:
            return list.__getitem__(self, key)
        except IndexError:
            return None


class DescFormatter(IndentedHelpFormatter):

    def format_description(self, description):
        return "Assist in merging in commits from an svn branch\n"\
               "\n"\
               "Example:\n"\
               "     git svn-merge my-branch\n"


def run(cmd, explain):
    if explain:
        return sys.stdout.write("-- %s\n" % cmd)
    if call(cmd, shell=True):
        print "Command '%s' returned non-zero exit status" % cmd
        sys.exit(1)


def apply_patches(dir, explain):
    if explain:
        return sys.stdout.write("-- %s\n" % cmd)
    cmd = "git am %s" % dir
    if call(cmd, shell=True):
        print "Fix the merge files then re-run '%s' cmd"
        sys.exit(1)


def remove(name):
    found = False
    result = []

    with open(name, "r") as file:
        for line in file:
            if re.search("git-svn-id:",line):
                found = True
                continue
            result.append(line)

    if not found:
        return found

    with open(name, "w") as file:
        # write the modified file out
        file.write("".join(result))


def clean_patch_files(dir):
    for name in os.listdir(dir):
        path = os.path.join(dir, name)
        # Remove any empty patch files (merge commits)
        if os.stat(path).st_size == 0:
            os.unlink(path)
            continue

        # Remove git-svn-id: from the patch files
        remove(path)


if __name__ == '__main__':
    parser = OptionParser(usage="Usage: %prog [-h]",
                formatter=DescFormatter(), description=' ')
    parser.add_option('-e', '--explain', const=True, action='store_const',
            help="print commands to be executed, instead of executing them")

    options, args = parser.parse_args()
    args = SafeList(args)

    # figure out the git root directory
    root_dir = check_output("git rev-parse --show-toplevel", shell=True).rstrip()
    if root_dir == '':
        print "-- Could not determine root of the git repo; not in a git repo?"
        sys.exit(1)

    # user must provide a branch
    if not args[0]:
        print "-- you must provide a branch to merge"
        sys.exit(1)

    # path to the patch directory
    patch_dir = os.path.join(root_dir, ".svn-merge")
    if not os.path.exists(patch_dir):
        # make patch directory .svn-merge
        os.mkdir(patch_dir)

    # clean up .svn-merge
    call("rm -r %s/*.patch 2> /dev/null" % patch_dir, shell=True)

    # switch branches
    run("git checkout %s" % args[0], options.explain)

    # create patch files
    run("git format-patch master -o .svn-merge", options.explain)

    # Clean up the patch files
    clean_patch_files(patch_dir)

    # switch back to master
    run("git checkout master", options.explain)

    # Run 'git am' to apply the patch files
    apply_patches(".svn-merge/*.patch", options.explain)

    # Clean up the .svn-merge directory
    rmtree(".svn-merge")

