#! /usr/bin/env python

import sys
from optparse import IndentedHelpFormatter, OptionParser
from subprocess import check_output, call


class SafeDict(list):
    def __getitem__(self, key):
        try:
            return list.__getitem__(self, key)
        except IndexError:
            return None


class DescFormatter(IndentedHelpFormatter):

    def format_description(self, description):
        return "Assist publishing local branches to a remote repo\n"\
               "\n"\
               "Example:\n"\
               "     git branch my-branch\n"\
               "     git checkout my-branch\n"\
               "     git publish\n"\
               "\n"\
               "Or you can specify the remote\n"\
               "     git publish github\n"\
               "     git publish origin\n"


def run(cmd, explain):
    if not explain:
        return call(cmd, shell=True)
    print "-- ", cmd


if __name__ == '__main__':
    parser = OptionParser(usage="Usage: %prog [-h]",
                formatter=DescFormatter(), description=' ')
    parser.add_option('-e', '--explain', const=True, action='store_const',
            help="print commands to be executed, instead of executing them")

    options, args = parser.parse_args()
    args = SafeDict(args)

    # If the user specifed a remote repo
    remote = args[1] or 'origin'

    # Get the current branch from git
    branch = check_output("git name-rev --name-only HEAD", shell=True).rstrip()
    if branch == '':
        print "-- Could not determine local branch name; not in a git repo?"
        sys.exit(1)

    # Or use the branch specifed by the user
    branch = args[2] or branch

    # No need to track master
    if branch == 'master':
        print "-- Refusing to publish 'master'"
        sys.exit(0)

    # Checkout master
    run("git checkout master" % locals(), options.explain)
    # Create the new branch on the remote
    run("git push %(remote)s %(branch)s:refs/heads/%(branch)s"
            % locals(), options.explain)
    # Update the local repo, so it knows about the remote branch
    run("git fetch %(remote)s" % locals(), options.explain)
    # Delete the original branch so we can track the new one
    run("git branch -D %(branch)s" % locals(), options.explain)
    # Ensure the local branch tracks with the remote branch
    run("git checkout --track -b %(branch)s %(remote)s/%(branch)s"
            % locals(), options.explain)
    # Pull to ensure everything is up to date
    run("git pull", options.explain)
