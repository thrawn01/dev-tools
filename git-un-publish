#! /usr/bin/env python

import sys
from optparse import IndentedHelpFormatter, OptionParser
from subprocess import check_output, call


class DescFormatter(IndentedHelpFormatter):

    def format_description(self, description):
        return "Remove remote branches\n"\
               "\n"\
               "Example:\n"\
               "     git checkout my-branch\n"\
               "     git un-publish\n"\
               "\n"\
               "Or you can specify the remote branch\n"\
               "     git un-publish origin my-branch\n"\
               "Or you can specify just the remote, un-publish \n"\
               "will then delete the current branch on 'github'\n"\
               "     git un-publish github\n"


class SafeList(list):
    def __getitem__(self, key):
        try:
            return list.__getitem__(self, key)
        except IndexError:
            return None


def run(cmd, explain):
    if explain:
        return sys.stdout.write("-- %s\n" % cmd)
    if call(cmd, shell=True):
        print "Command '%s' returned non-zero exit status" % cmd
        sys.exit(1)


if __name__ == '__main__':
    parser = OptionParser(usage="Usage: %prog [-h]",
                formatter=DescFormatter(), description=' ')
    parser.add_option('-e', '--explain', const=True, action='store_const',
            help="print commands to be executed, instead of executing them")

    options, args = parser.parse_args()
    args = SafeList(args)

    # If the user specifed a remote repo
    remote = args[0] or 'origin'

    # Get the current branch from git
    branch = check_output("git name-rev --name-only HEAD", shell=True).rstrip()
    if branch == '':
        print "-- Could not determine local branch name; not in a git repo?"
        sys.exit(1)

    # If the user specifed a branch
    branch = args[1] or branch

    # No need to un-publish master
    if branch == 'master':
        print "-- Refusing to un-publish master"
        sys.exit(1)

    # Delete the branch on the remote
    run("git push %(remote)s :%(branch)s" % locals(), options.explain)
